name: Build PDF Extractor Windows Executable
on:
  push:
    branches: [main]
    tags:
      - "v*" # 'v'로 시작하는 모든 태그에 대해 워크플로우 실행
  pull_request:
    branches: [main]
  workflow_dispatch: # 수동으로 워크플로우를 실행할 수 있게 함
# 워크플로우에 필요한 권한 설정
permissions:
  contents: write # 릴리즈 생성 및 에셋 업로드를 위한 권한
  actions: read # 워크플로우 정보 접근을 위한 권한
jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          echo "Installing core dependencies..."
          pip install --no-cache-dir pandas openpyxl numpy
          echo "Installing PDF processing..."
          pip install --no-cache-dir pdfplumber PyPDF2 PyMuPDF
          echo "Installing image processing..."
          pip install --no-cache-dir opencv-python Pillow
          echo "Installing table extraction..."
          pip install --no-cache-dir tabula-py "camelot-py[base]"
          echo "Installing build tool..."
          pip install --no-cache-dir pyinstaller
          echo "Installing OCR (optional)..."
          pip install --no-cache-dir pytesseract easyocr || echo "OCR packages failed - continuing..."
          echo "Final package list:"
          pip list
          
      - name: Install system dependencies (for OCR and Java)
        run: |
          # Tesseract OCR 설치 (Windows)
          choco install tesseract -y
          # Java 설치 (tabula-py 의존성)
          choco install openjdk11 -y
          # 환경 변수 설정
          echo "TESSDATA_PREFIX=C:\Program Files\Tesseract-OCR\tessdata" >> $GITHUB_ENV
          echo "JAVA_HOME=C:\Program Files\OpenJDK\jdk-11.0.16.101-hotspot" >> $GITHUB_ENV

      - name: Verify dependencies
        run: |
          echo "Verifying Python packages..."
          python -c "import tkinter; print('✓ tkinter OK')" || echo "✗ tkinter FAILED"
          python -c "import pandas; print('✓ pandas OK')" || echo "✗ pandas FAILED"
          python -c "import pdfplumber; print('✓ pdfplumber OK')" || echo "✗ pdfplumber FAILED"
          python -c "import fitz; print('✓ PyMuPDF OK')" || echo "✗ PyMuPDF FAILED"
          python -c "import camelot; print('✓ camelot OK')" || echo "✗ camelot FAILED"
          python -c "import tabula; print('✓ tabula OK')" || echo "✗ tabula FAILED"
          python -c "import cv2; print('✓ opencv OK')" || echo "✗ opencv FAILED"
          python -c "import PIL; print('✓ Pillow OK')" || echo "✗ Pillow FAILED"
          python -c "import PyInstaller; print('✓ PyInstaller OK')" || echo "✗ PyInstaller FAILED"
          echo "Dependency verification completed."
          
      - name: Build PDF Extractor EXE
        run: |
          echo "=== Build Environment ==="
          python --version
          echo "Working directory: $(Get-Location)"
          echo "Available files:"
          Get-ChildItem -Name
          echo ""
          echo "=== Starting build process ==="
          python build.py
          echo "=== Build process completed ==="
          
      - name: Debug build output
        if: always()
        run: |
          echo "=== Build Artifacts Check ==="
          if (Test-Path "dist") {
            echo "dist/ directory contents:"
            Get-ChildItem dist/ -Recurse | Format-Table
          } else {
            echo "dist/ directory not found"
          }
          if (Test-Path "build") {
            echo "build/ directory contents:"
            Get-ChildItem build/ -Recurse | Select-Object -First 20 | Format-Table
          }
          if (Test-Path "pdf-extractor.spec") {
            echo "PyInstaller spec file exists"
          }
          
      - name: Check build output
        run: |
          if (Test-Path "dist/pdf-extractor.exe") {
            echo "✓ Build successful! pdf-extractor.exe created."
            $fileInfo = Get-ChildItem "dist/pdf-extractor.exe"
            echo "File size: $($fileInfo.Length) bytes"
            echo "Created: $($fileInfo.CreationTime)"
          } else {
            echo "✗ Build failed! pdf-extractor.exe not found."
            echo "Available files in dist/:"
            if (Test-Path "dist") {
              Get-ChildItem dist/
            } else {
              echo "dist/ directory does not exist"
            }
            exit 1
          }

      - name: Upload PDF Extractor EXE as artifact
        uses: actions/upload-artifact@v4
        with:
          name: pdf-extractor-exe
          path: dist/pdf-extractor.exe

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            dist/pdf-extractor.exe
          name: PDF Extractor ${{ github.ref_name }}
          body: |
            ## PDF Extractor ${{ github.ref_name }}
            
            PDF 파일에서 텍스트와 테이블을 추출하는 Windows 실행 파일입니다.
            
            ### 기능
            - PDF 텍스트 추출 (PyPDF2, pdfplumber, PyMuPDF 지원)
            - PDF 테이블 추출 및 Excel 변환
            - 단일 파일 및 디렉토리 일괄 처리
            
            ### 사용법
            ```
            pdf-extractor.exe --file your_file.pdf
            pdf-extractor.exe --directory your_pdf_folder
            pdf-extractor.exe --help
            ```
            
            ### 시스템 요구사항
            - Windows 10/11 (64-bit)
            - 인터넷 연결 불필요 (독립 실행형)
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
